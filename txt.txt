router.post('/category-management',upload.none(),catagory,()=>{
  console.log('hello redirected')
  res.render('admin/category-management',{admin:true})
});

const { catagory } = require("../controller/catagory");



const Catagory = require("../models/catagory");

exports.catagory = (req, res, next) => {
  const catagory = new Catagory({
    name: req.body.name,
  });

  catagory
    .save()
    .then((catagory) => {
      console.log(catagory);
    })

    .catch((err) => {
      console.log("err");
    });

    // res.redirect('/admin/category-management')
    next()
};




router.get('/delete-catagory/:id',upload.none(),deletecatagory=async(req,res)=>{
  let catagoryid = req.params.id
  
  console.log(catagoryid)
  Catagory.findByIdAndRemove(catagoryid).then(catagory=>{
    if(catagory){
      console.log("Catagory deleted")
      res.redirect('/admin/view-category-management')

    }
    else{
     console.log('some error in deleting catagry')
    }
  }).catch(err=>{
    return res.satatus(400).json({err})
  })
})





const Product = require("../models/product");
var express = require("express");
var fs = require("fs");
const Catagory = require("../models/catagory");
const { route } = require("../routes/admin");

// fs.unlink('sample.txt', function (err) {
//   if (err) throw err;
//   // if no error, file has been deleted successfully
//   console.log('File deleted!');
// });

//Adding product
exports.product = (req, res, next) => {
  console.log("heroollloo", req.body);

  const {
    name,
    price,
    mrp,
    discription,
    brand,
    quantity,
    stockAlart,
    catagory,
    isfeatured,
  } = req.body;
  let image = [];
  if (req.files.length > 0) {
    image = req.files.map((file) => {
      //file means map function take two argument 1st data 2nd index //
      return { img: file.filename };
    });
  }
  const product = new Product({
    name,
    price,
    mrp,
    discription,
    brand,
    quantity,
    stockAlart,
    catagory,
    isfeatured,
    image,
  });
  product
    .save()
    .then((product) => {
      console.log(product);
    })
    .catch((err) => {
      console.log(err + "Product database Insertion Error");
    });
  console.log("Inserted photo with data ", req.body);
  console.log(req.files);
  res.render("/admin/add-product");
};

//Getting product
exports.getproduct = async (req, res) => {
  const product = await Product.find().populate("catagory");
  if (!product) {
    console.log("No product found");
  } else {
    let getproduct = product;
    res.render("admin/product-management", { admin: true, getproduct });
    console.log("product list...", getproduct);
  }
};
//Deleting product
exports.deleteproduct = async (req, res) => {
  console.log(req.body);
  let productid = req.params.id;
  Product.findByIdAndRemove(productid)
    .then((product) => {
      if (product) {
        console.log("Product removed", product);
      } else {
        console.log("some errorin deleting product");
      }
    })
    .catch((err) => {
      console.log("Error in deleting product", err);
    });
  res.redirect("/admin/product-management");
};

//edit product
exports.editproduct = async (req, res) => {
  let productid = req.params.id;
  console.log("iddd", productid);

  //getting catagory//
  const catagoryList = await Catagory.find();
  if (!catagoryList) {
    console.log("No catagory list found");
  } else {
    var catagory = catagoryList;
    console.log(catagoryList);
  }

  //findingproduct//
  console.log("proid...", productid);
  const productd = await Product.findById(productid);

  if (!productd) {
    console.log("No product found");
  } else {
    let getproduct = productd;
    res.render("admin/edit-product", { admin: true, catagory, productd });
    // console.log("product from productd list...", productd);
  }

  // console.log("hee",productd)
  // res.render("admin/edit-product", { admin: true, productd, catagory});
};

exports.updateproduct = async (req, res) => {
  let protid = req.params.id;
  console.log("proid from update..", protid);

  console.log("update...", req.body);
  const {
    name,
    price,
    mrp,
    discription,
    brand,
    quantity,
    stockAlart,
    catagory,
    isfeatured,
  } = req.body;

  let product = await Product.findByIdAndUpdate(protid, {
    name,
    price,
    mrp,
    discription,
    brand,
    quantity,
    stockAlart,
    catagory,
    isfeatured,
  })
  if (!product) {
    console.log("No product found");
  } else {
    
    res.render("admin/edit-product", { admin: true, catagory, product });
  }
 
};








const mongoose = require("mongoose");
//PRODUCT SCHEMA

const productSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    trim: true,
  },
  price: {
    type: Number,
    required: true,
  },
  mrp: {
    type: Number,
  },
  discription: {
    type: String,
  },
  brand: {
    type: String,
  },
  quantity: {
    type: Number,
    required: true,
  },
  stockAlart: {
    type: Number,
  },
  isfeatured: {
    type: Boolean,
    default: false,
  },

  image: [
    //nested documents
    {
      img: { type: String },
    },
  ],
  dateCreated: {
    type: Date,
    default: Date.now,
  },
});
module.exports = mongoose.model("Product", productSchema);

